import { PinsApi as RemotePinningServiceClient } from '../dist.generated/apis/index.js';
import { Configuration as GeneratedConfiguration } from '../dist.generated/index.js';
class Configuration extends GeneratedConfiguration {
    constructor(options) {
        const finalOptions = { ...options };
        /**
         * Prevent the need for everyone to have to override the fetch API...
         */
        if (options.fetchApi == null) {
            finalOptions.fetchApi = fetch;
        }
        // @see https://github.com/ipfs-shipyard/js-pinning-service-http-client/issues/3
        if (options.endpointUrl != null) {
            finalOptions.basePath = options.endpointUrl;
        }
        super(finalOptions);
    }
}
export { Configuration, RemotePinningServiceClient };
export * from '../dist.generated/models/index.js';
export { BASE_PATH, BaseAPI, BlobApiResponse, COLLECTION_FORMATS, 
// Configuration, // overwritten above
JSONApiResponse, RequiredError, TextApiResponse, VoidApiResponse, canConsumeForm, exists, mapValues, querystring } from '../dist.generated/runtime.js';
//# sourceMappingURL=index.js.map